// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using questionnaire.Infrastructure.Data;

namespace questionnaire.Api.Migrations
{
    [DbContext(typeof(QuestionnaireContext))]
    partial class QuestionnaireContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("questionnaire.Core.Domains.SurveyTemplates.ChoiceOptionTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FieldDataTemplateId");

                    b.Property<int>("OptionPosition");

                    b.Property<bool>("Value");

                    b.Property<string>("ViewValue");

                    b.HasKey("Id");

                    b.HasIndex("FieldDataTemplateId");

                    b.ToTable("ChoiceOptionTemplates");
                });

            modelBuilder.Entity("questionnaire.Core.Domains.SurveyTemplates.FieldDataTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Input");

                    b.Property<string>("MaxLabel");

                    b.Property<int>("MaxValue");

                    b.Property<string>("MinLabel");

                    b.Property<int>("MinValue");

                    b.Property<int>("QuestionTemplateId");

                    b.HasKey("Id");

                    b.HasIndex("QuestionTemplateId");

                    b.ToTable("FieldDataTemplates");
                });

            modelBuilder.Entity("questionnaire.Core.Domains.SurveyTemplates.QuestionTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content");

                    b.Property<bool>("IsRequired");

                    b.Property<int>("QuestionPosition");

                    b.Property<string>("Select");

                    b.Property<int>("SurveyTemplateId");

                    b.HasKey("Id");

                    b.HasIndex("SurveyTemplateId");

                    b.ToTable("QuestionTemplates");
                });

            modelBuilder.Entity("questionnaire.Core.Domains.SurveyTemplates.RowTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FieldDataTemplateId");

                    b.Property<string>("Input");

                    b.Property<int>("RowPosition");

                    b.HasKey("Id");

                    b.HasIndex("FieldDataTemplateId");

                    b.ToTable("RowTemplates");
                });

            modelBuilder.Entity("questionnaire.Core.Domains.SurveyTemplates.SurveyTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("SurveyTemplates");
                });

            modelBuilder.Entity("questionnaire.Core.Domains.Surveys.ChoiceOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FieldDataId");

                    b.Property<int>("OptionPosition");

                    b.Property<bool>("Value");

                    b.Property<string>("ViewValue");

                    b.HasKey("Id");

                    b.HasIndex("FieldDataId");

                    b.ToTable("ChoiceOptions");
                });

            modelBuilder.Entity("questionnaire.Core.Domains.Surveys.FieldData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Input");

                    b.Property<string>("MaxLabel");

                    b.Property<int>("MaxValue");

                    b.Property<string>("MinLabel");

                    b.Property<int>("MinValue");

                    b.Property<int>("QuestionId");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("FieldData");
                });

            modelBuilder.Entity("questionnaire.Core.Domains.Surveys.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content");

                    b.Property<bool>("IsRequired");

                    b.Property<int>("QuestionPosition");

                    b.Property<string>("Select");

                    b.Property<int>("SurveyId");

                    b.HasKey("Id");

                    b.HasIndex("SurveyId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("questionnaire.Core.Domains.Surveys.Row", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FieldDataId");

                    b.Property<string>("Input");

                    b.Property<int>("RowPosition");

                    b.HasKey("Id");

                    b.HasIndex("FieldDataId");

                    b.ToTable("Rows");
                });

            modelBuilder.Entity("questionnaire.Core.Domains.Surveys.Survey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("Surveys");
                });

            modelBuilder.Entity("questionnaire.Core.Domains.SurveyTemplates.ChoiceOptionTemplate", b =>
                {
                    b.HasOne("questionnaire.Core.Domains.SurveyTemplates.FieldDataTemplate", "FieldDataTemplate")
                        .WithMany("ChoiceOptionTemplates")
                        .HasForeignKey("FieldDataTemplateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("questionnaire.Core.Domains.SurveyTemplates.FieldDataTemplate", b =>
                {
                    b.HasOne("questionnaire.Core.Domains.SurveyTemplates.QuestionTemplate", "QuestionTemplate")
                        .WithMany("FieldDataTemplates")
                        .HasForeignKey("QuestionTemplateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("questionnaire.Core.Domains.SurveyTemplates.QuestionTemplate", b =>
                {
                    b.HasOne("questionnaire.Core.Domains.SurveyTemplates.SurveyTemplate", "SurveyTemplate")
                        .WithMany("QuestionTemplates")
                        .HasForeignKey("SurveyTemplateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("questionnaire.Core.Domains.SurveyTemplates.RowTemplate", b =>
                {
                    b.HasOne("questionnaire.Core.Domains.SurveyTemplates.FieldDataTemplate", "FieldDataTemplate")
                        .WithMany("RowTemplates")
                        .HasForeignKey("FieldDataTemplateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("questionnaire.Core.Domains.Surveys.ChoiceOption", b =>
                {
                    b.HasOne("questionnaire.Core.Domains.Surveys.FieldData", "FieldData")
                        .WithMany("ChoiceOptions")
                        .HasForeignKey("FieldDataId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("questionnaire.Core.Domains.Surveys.FieldData", b =>
                {
                    b.HasOne("questionnaire.Core.Domains.Surveys.Question", "Question")
                        .WithMany("FieldData")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("questionnaire.Core.Domains.Surveys.Question", b =>
                {
                    b.HasOne("questionnaire.Core.Domains.Surveys.Survey", "Survey")
                        .WithMany("Questions")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("questionnaire.Core.Domains.Surveys.Row", b =>
                {
                    b.HasOne("questionnaire.Core.Domains.Surveys.FieldData", "FieldData")
                        .WithMany("Rows")
                        .HasForeignKey("FieldDataId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
